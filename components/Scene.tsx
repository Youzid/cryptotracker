/*
  Auto-generated by Spline
*/

import useSpline from '@splinetool/r3f-spline'
import { Float, Html, OrbitControls, PerspectiveCamera, Sparkles, useScroll,useContextBridge, ScrollControls, Effects } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { Vector3 } from 'three';
import {
  orchestrate,
  helpers,
  useRegister,
  useThreeCamera,
  Scroll,
  InheritSymbol,
  rangesOverlap,
  range
} from "jongleur";
import Home from './Home';
import { ReactReduxContext } from 'react-redux';
import { clips } from './clips';
import { useEffect } from 'react';









  interface Props {
    nfts: Nft[];
  
  }



export default function Scene({  nfts ,...props }:Props) {
  


  const register = useRegister(clips);
  // useThreeCamera(clips, "camera"); // camera is an object that is created by r3f
  const camera = useThree(s => s.camera);
  useEffect(() => {
    // register the camera as the object
    register("camera")(camera);
    // Also unregister on "unmount" to replicate 
    // the ref callback behavior of react
    return () => register("camera")(null);
  }, [camera, register]);




  const ContextBridge = useContextBridge(ReactReduxContext)

  const { nodes, materials } = useSpline('https://prod.spline.design/z-06FhWRsu5yzGTC/scene.splinecode')


const three = useThree()


useFrame((state, delta, xrFrame) => {
  three.performance.debounce = 800

})
const data = useScroll()


  return (



    
    <>
            
          <Scroll.Controls clips={clips} damping={1}   >
         
          <Scroll.Html fixed  >
          
     

     


     <ContextBridge >
      <Home nfts={nfts}  />
     </ContextBridge>

    
    
     </Scroll.Html>
  
      
       
          {/* <Scroll.Snaps points={[0,1,2,2.5,,4].map(v => v + 0.5)}    /> */}
          <Scroll.Snaps points={[0,1,2,2.5,2.99,3.5,4].map(v => v + 0.5)}  
       
       


          
          
          />
      <color args={['#666']} />
      <mesh
          name="Rectangle"
          geometry={nodes.Rectangle.geometry}
          material={materials['Rectangle Material']}
          castShadow
          position={[-7.64, 45.95, -82.55]}
          rotation={[0, 0, 0]}
          scale={1}
        />
      <Float
  speed={1} // Animation speed, defaults to 1
  rotationIntensity={2} // XYZ rotation intensity, defaults to 1
  floatIntensity={1} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
  floatingRange={[1, 10]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]
>

{/* ----------Spline 3d scene  start  ------------*/}


      <group {...props} dispose={null}>
        
        <group name="Group" position={[5.3, 25.35, 15.72]}>
       

          <mesh
            name="Torus"
            geometry={nodes.Torus.geometry}
            material={materials['Torus Material']}
            receiveShadow
            position={[0, 5.79, -6.16]}
            rotation={[-0.89, 0.01, 1.35]}
            scale={1}
          />
      
        </group>
        <group name="scene" />
        <spotLight

          name="Spot Light 3"
          castShadow
          intensity={1.5}
          angle={Math.PI / 6}
          penumbra={1}
          distance={200}
          shadow-mapSize-width={1024}
          shadow-mapSize-height={1024}
          shadow-camera-fov={119.99999999999999}
          shadow-camera-near={100}
          shadow-camera-far={100000}
          color="#fecf00"
          position={[0, -84.65, 22.5]}
          rotation={[0, 0, Math.PI]}
          scale={[1, 1, 1.6]}
        />
        <spotLight
          name="Spot eye right"
          castShadow
          intensity={2}
          angle={1.4}
          penumbra={1}
          distance={10}
          shadow-mapSize-width={1024}
          shadow-mapSize-height={1024}
          shadow-camera-fov={119.99999999999999}
          shadow-camera-near={100}
          shadow-camera-far={100000}
          color="#fecc00"
          position={[18.14, 22.05, 21.48]}
          rotation={[1.93, -0.3, -0.33]}
          scale={1}
        />
        <spotLight
          name="Spot eye left"
          castShadow
          intensity={2}
          angle={Math.PI / 2}
          penumbra={1}
          distance={10}
          shadow-mapSize-width={1024}
          shadow-mapSize-height={1024}
          shadow-camera-fov={119.99999999999999}
          shadow-camera-near={100}
          shadow-camera-far={100000}
          color="#fecc00"
          position={[7.43, 22, 25.9]}
          rotation={[1.82, -0.26, -0.36]}
        />
        <mesh
          name="untitled2"
          geometry={nodes.untitled2.geometry}
         
          castShadow
          receiveShadow
          position={[0, -49.72, 0]}
          
        >
           <meshStandardMaterial

 
    opacity={1}
    
   />

   
        </mesh>
      


      
    
      </group>
      </Float>
      <pointLight

      name="white left  Light"
     
      castShadow
      intensity={1}
      distance={200}
      shadow-mapSize-width={1024}
      shadow-mapSize-height={1024}
      shadow-camera-near={100}
      shadow-camera-far={1000}
      position={[-80.35, 50.76, -10]}
      scale={[1, 1, 1.64]}
    />
    
      <pointLight
            ref={register("light")}
          name="white  right Light"
          castShadow
          
          intensity={3}
          distance={2000}
          shadow-mapSize-width={1024}
          shadow-mapSize-height={1024}
          shadow-camera-near={100}
          shadow-camera-far={100000}
          position={[77.35, 83.76, 6.98]}
          scale={[1, 1, 1.64]}
        />
      <Sparkles noise={1} count={200}  scale={200}  size={200} speed={3} position={[0,0,5]}  color={"gold"}/>
      {/* --------------Spline 3d scene  end --------------------- */}

  
      </Scroll.Controls>
    </>
  )
}
